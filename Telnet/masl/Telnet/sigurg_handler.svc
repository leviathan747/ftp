private service Telnet::sigurg_handler () is
exceptfds: set of integer;
emptyset: set of integer;
begin
  Logger::information( "Telnet::sigurg_handler: Received urgent signal." );
  for conn in find_all RemoteConnection() loop
    exceptfds := exceptfds union integer(conn.socket_id);
  end loop;
  // check for sockets with an exception condition set -- this means there is out of band data available
  if ( Socket::select( emptyset, emptyset, exceptfds, Socket::durationtotimeval( @PT0S@ ) ) < 0 ) then
    Logger::error( "Telnet::sigurg_handler: Error " & Socket::geterror()'image & ": " & Socket::strerror() );
  else
    for sock in exceptfds loop
      for conn in find RemoteConnection( socket_id = Socket::socketfd(sock) ) loop
        // tell the socket to read
        cancel conn.ticker;
        generate RemoteConnection.read() to conn;
        // put the terminal into synching mode
        generate NetworkVirtualTerminal.synch() to conn->R3.provides_communication_channel_for.NetworkVirtualTerminal;
      end loop;
    end loop;
  end if;
end service;
