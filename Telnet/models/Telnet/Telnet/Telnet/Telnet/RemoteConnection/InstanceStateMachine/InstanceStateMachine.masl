//! ACTIVITY BEGIN. '2740c197-7613-46cf-b20c-3a91f8f3a7c9' '7c65ee46-0f42-4c51-b46c-0b2e0e8983c5' DO NOT EDIT THIS LINE.
state Telnet::RemoteConnection.Idle () is
begin
  null;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '2740c197-7613-46cf-b20c-3a91f8f3a7c9' '7604b224-292e-4c52-afe5-5befb9de0229' DO NOT EDIT THIS LINE.
state Telnet::RemoteConnection.Listening () is
sock: Socket::socketfd;
remoteaddr: Socket::sockaddr;
begin

  // if the socket does not exist, create it
  if ( this.socket_id < 0 ) then

    // create a server socket
    this.socket_id := Socket::socket( Socket::SOCK_STREAM, Socket::IPPROTO_TCP );
    if ( this.socket_id < 0 ) then
      raise Socket::SocketException;
    end if;
     
    // bind to the locally specified port
    if ( Socket::bind( this.socket_id, this.local_address ) < 0 ) then
      raise Socket::SocketException;
    end if;
    
    // start listening
    if ( Socket::listen( this.socket_id, 1 ) < 0 ) then
      raise Socket::SocketException;
    end if;
    
  end if;
  
  // accept a connection
  sock := Socket::accept( this.socket_id, remoteaddr );
  if ( sock < 0 ) then
    raise Socket::SocketException;
  else
    this.socket_id := sock;
    this.remote_address := remoteaddr;
    generate ready() to this;
  end if;
  
exception when Socket::SocketException =>
  generate error( ( "Error " & Socket::geterror()'image & ": " & Socket::strerror(), SOCKETERR ) ) to this;

end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '2740c197-7613-46cf-b20c-3a91f8f3a7c9' '3d4fdfa0-7d5d-483f-9fbb-36dd8378f995' DO NOT EDIT THIS LINE.
state Telnet::RemoteConnection.ReportingError ( code : in error ) is
begin
  // TODO log error
  Print~>error( code );
  generate RemoteConnection.close() to this;
  
  // TODO clean up
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '2740c197-7613-46cf-b20c-3a91f8f3a7c9' '76ccd70f-a409-4cdf-a57b-0b0c5cd6775b' DO NOT EDIT THIS LINE.
state Telnet::RemoteConnection.ReceivingData () is
buffer: Socket::data;
begin

  // receive data
  if ( Socket::recv( this.socket_id, buffer, 1024, 0 ) < 0 ) then
    raise Socket::SocketException;
  end if;
  
  // no data means the peer has closed the connection
  if ( buffer'length > 0 ) then

    // print data
    console << "Received data: " << Socket::datatostring( buffer ) << endl;
  
    // repeat
    generate ready() to this;
  
  else
    generate close() to this;
  end if;

exception when Socket::SocketException =>
  generate error( ( "Error " & Socket::geterror()'image & ": " & Socket::strerror(), SOCKETERR ) ) to this;

end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '2740c197-7613-46cf-b20c-3a91f8f3a7c9' '29382008-b1cf-47e3-80d7-69397eefec18' DO NOT EDIT THIS LINE.
state Telnet::RemoteConnection.Connecting () is
begin
  null;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '2740c197-7613-46cf-b20c-3a91f8f3a7c9' '8d0932e0-f455-496e-b4a6-db6561d84811' DO NOT EDIT THIS LINE.
state Telnet::RemoteConnection.SendingData () is
begin
  null;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '2740c197-7613-46cf-b20c-3a91f8f3a7c9' '742045b2-ac47-4017-9242-e1d596cd7844' DO NOT EDIT THIS LINE.
terminal state Telnet::RemoteConnection.ShuttingDown () is
begin

  // TODO gracefully close the socket
  
  // unlink from terminal
  unlink this R3 this->R3.provides_communication_channel_for.NetworkVirtualTerminal;
  
  // delete self
  delete this;
  
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

