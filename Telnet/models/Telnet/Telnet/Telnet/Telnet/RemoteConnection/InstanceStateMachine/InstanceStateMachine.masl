//! ACTIVITY BEGIN. '2740c197-7613-46cf-b20c-3a91f8f3a7c9' '7c65ee46-0f42-4c51-b46c-0b2e0e8983c5' DO NOT EDIT THIS LINE.
state Telnet::RemoteConnection.Idle () is
begin
  null;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '2740c197-7613-46cf-b20c-3a91f8f3a7c9' '7604b224-292e-4c52-afe5-5befb9de0229' DO NOT EDIT THIS LINE.
state Telnet::RemoteConnection.Listening () is
sock: Socket::socketfd;
remoteaddr: Socket::sockaddr;
readfds: set of integer;
emptyfds: set of integer;
retval: integer;
begin

  // if the socket does not exist, create it
  if ( this.socket_id < 0 ) then

    // create a server socket
    this.socket_id := Socket::socket( Socket::SOCK_STREAM, Socket::IPPROTO_TCP );
    if ( this.socket_id < 0 ) then
      raise Socket::SocketException;
    end if;
     
    // bind to the locally specified port
    if ( Socket::bind( this.socket_id, this.local_address ) < 0 ) then
      raise Socket::SocketException;
    end if;
    
    // start listening
    if ( Socket::listen( this.socket_id, 1 ) < 0 ) then
      raise Socket::SocketException;
    end if;
    
  end if;
  
  // select for incoming connections
  readfds := integer(this.socket_id);
  retval := Socket::select( readfds, emptyfds, emptyfds, Socket::durationtotimeval( @PT0S@ ) );
  if ( retval < 0 ) then
    raise Socket::SocketException;
  elsif( retval = 0 ) then
    if ( Connections.default().default_timeout > this.retries * Connections.default().tick ) then
      schedule this.ticker generate listen() to this delay Connections.default().tick;
      this.retries := this.retries + 1;
    else
      generate error( ( "Listen operation timed out.", SOCKETERR ) ) to this;
    end if;
  else
  
    // accept a connection
    sock := Socket::accept( this.socket_id, remoteaddr );
    if ( sock < 0 ) then
      raise Socket::SocketException;
    else
      this.socket_id := sock;
      this.remote_address := remoteaddr;
      this.connected := true;
      generate ready() to this;
      generate NetworkVirtualTerminal.connected() to this->R3.provides_communication_channel_for.NetworkVirtualTerminal;
    end if;

  end if;
  
exception when Socket::SocketException =>
  generate error( ( "Error " & Socket::geterror()'image & ": " & Socket::strerror(), SOCKETERR ) ) to this;

end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '2740c197-7613-46cf-b20c-3a91f8f3a7c9' '3d4fdfa0-7d5d-483f-9fbb-36dd8378f995' DO NOT EDIT THIS LINE.
state Telnet::RemoteConnection.ReportingError ( error : in error ) is
begin

  // log error
  Logger::error( "Telnet::RemoteConnection: " & error.code'image & " " & error.message );
  Print~>error( error );
  generate RemoteConnection.close() to this;

end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '2740c197-7613-46cf-b20c-3a91f8f3a7c9' '76ccd70f-a409-4cdf-a57b-0b0c5cd6775b' DO NOT EDIT THIS LINE.
state Telnet::RemoteConnection.ReceivingData () is
buffer: sequence of byte;
readfds: set of integer;
emptyfds: set of integer;
retval: integer;
printer: instance of Printer;
reader: device;
begin

  // select for input data
  readfds := integer(this.socket_id);
  retval := Socket::select( readfds, emptyfds, emptyfds, Socket::durationtotimeval( @PT0S@ ) );
  if ( retval < 0 ) then
    raise Socket::SocketException;
  elsif( retval = 0 ) then
    schedule this.ticker generate ready() to this delay Connections.default().tick;
  else

    // receive data
    if ( Socket::recv( this.socket_id, buffer, Connections.default().buffer_size, 0 ) < 0 ) then
      raise Socket::SocketException;
    end if;
  
    // no data means the peer has closed the connection
    if ( buffer'length > 0 ) then

      // store data
      BinaryIO::open_byte_reader( buffer, reader );
      Logger::information( "Telnet::RemoteConnection: Received data: " & BinaryIO::read_raw_string( reader, buffer'length ) );
      BinaryIO::close_byte_reader( reader );
      printer := this->R3.provides_communication_channel_for.NetworkVirtualTerminal->R1.outputs_data_on.Printer;
      printer.buffer := printer.buffer & buffer;
      generate Printer.data() to printer;
  
      // repeat
      schedule this.ticker generate ready() to this delay Connections.default().tick;
  
    else
      generate close() to this;
    end if;

  end if;

exception when Socket::SocketException =>
  generate error( ( "Error " & Socket::geterror()'image & ": " & Socket::strerror(), SOCKETERR ) ) to this;

end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '2740c197-7613-46cf-b20c-3a91f8f3a7c9' '29382008-b1cf-47e3-80d7-69397eefec18' DO NOT EDIT THIS LINE.
state Telnet::RemoteConnection.Connecting () is
begin
  null;
  // TODO implement client side connecting
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '2740c197-7613-46cf-b20c-3a91f8f3a7c9' '8d0932e0-f455-496e-b4a6-db6561d84811' DO NOT EDIT THIS LINE.
state Telnet::RemoteConnection.SendingData () is
buffer: sequence of byte;
writefds: set of integer;
emptyfds: set of integer;
retval: integer;
keyboard: instance of Keyboard;
emptybuffer: sequence of byte;
begin

  // select to assure the socket is writable
  writefds := integer(this.socket_id);
  retval := Socket::select( emptyfds, writefds, emptyfds, Socket::durationtotimeval( @PT0S@ ) );
  if ( retval < 0 ) then
    raise Socket::SocketException;
  elsif( retval = 0 ) then
    schedule this.ticker generate ready() to this delay Connections.default().tick;
  else
    
    // get data to send
    keyboard := this->R3.provides_communication_channel_for.NetworkVirtualTerminal->R2.receives_input_from.Keyboard;
    if ( keyboard.buffer'length < Connections.default().buffer_size ) then
      buffer := keyboard.buffer;
    else
      buffer := keyboard.buffer[1..Connections.default().buffer_size];
    end if;

    // send data
    retval := Socket::send( this.socket_id, buffer, buffer'length, 0 );
    if ( retval < 0 ) then
      raise Socket::SocketException;
    else

      Logger::information( "Telnet::RemoteConnection: Sent " & retval'image & " bytes of data." );

      // update keyboard buffer
      if ( retval < keyboard.buffer'length ) then
        keyboard.buffer := keyboard.buffer[retval+1..keyboard.buffer'last];
        schedule this.ticker generate ready() to this delay Connections.default().tick; // keyboard still has contents
      else
        keyboard.buffer := emptybuffer;
        generate read() to this; // keyboard empty, go back to reading
      end if;

    end if;

  end if;

exception when Socket::SocketException =>
  generate error( ( "Error " & Socket::geterror()'image & ": " & Socket::strerror(), SOCKETERR ) ) to this;

end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '2740c197-7613-46cf-b20c-3a91f8f3a7c9' '742045b2-ac47-4017-9242-e1d596cd7844' DO NOT EDIT THIS LINE.
terminal state Telnet::RemoteConnection.ShuttingDown () is
begin

  Logger::information( "Telnet::RemoteConnection: Shutting down socket." );

  // gracefully close the socket
  if ( Socket::close( integer(this.socket_id) ) < 0 ) then end if;
  
  // unlink from terminal
  unlink this R3 this->R3.provides_communication_channel_for.NetworkVirtualTerminal;
  
  // delete self
  delete this;
  
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

