//! ACTIVITY BEGIN. '101e1faa-88b1-40f1-bc8d-b61afe06ddf3' DO NOT EDIT THIS LINE.
public service Telnet::create_terminal ( termid : out termid ) is
term: instance of NetworkVirtualTerminal;
existing_terms: sequence of instance of NetworkVirtualTerminal;
begin

  // find the terminal with the highest ID and increment
  existing_terms := find_all NetworkVirtualTerminal() reverse_ordered_by( id );
  if ( existing_terms'length > 0 ) then
    termid := existing_terms[existing_terms'first].id + 1;
  else
    termid := 1;
  end if;
  
  // create a terminal, printer, and keyboard
  term := create NetworkVirtualTerminal( id => termid, Current_State => Idle );
  link create Printer( nvt_id => termid, Current_State => Idle ) R1.displays_output_for term;
  link create Keyboard( nvt_id => termid ) R2.passes_input_to term;

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '029e7f27-4bde-49e7-9290-567e37d71a5d' DO NOT EDIT THIS LINE.
public service Telnet::sendtext ( termid : in termid,
                                 text : in string ) is
term: instance of NetworkVirtualTerminal;
keyboard: instance of Keyboard;
writer: device;
begin
  term := find_one NetworkVirtualTerminal( id = termid );
  if ( null /= term ) then
    keyboard := term->R2.receives_input_from.Keyboard;
    BinaryIO::open_byte_writer( writer );
    writer << text;
    keyboard.buffer := keyboard.buffer & BinaryIO::get_bytes( writer ) & CharacterSequences.default().CRLF;
    BinaryIO::close_byte_writer( writer );
    generate NetworkVirtualTerminal.data() to term;
  end if;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '481ac0ec-0618-425c-b919-f87138088de5' DO NOT EDIT THIS LINE.
public service Telnet::command ( termid : in termid,
                                cmd : in telnetcmd ) is
term: instance of NetworkVirtualTerminal;
keyboard: instance of Keyboard;
cmdbytes: sequence of byte;
begin
  term := find_one NetworkVirtualTerminal( id = termid );
  if ( null /= term ) then
    keyboard := term->R2.receives_input_from.Keyboard;
    case cmd is
      when SE     => cmdbytes := CharacterSequences.default().SE;
      when NOP    => cmdbytes := CharacterSequences.default().NOP;
      when DM     => cmdbytes := CharacterSequences.default().SE;
      when BRK    => cmdbytes := CharacterSequences.default().SE;
      when IP     => cmdbytes := CharacterSequences.default().SE;
      when AO     => cmdbytes := CharacterSequences.default().SE;
      when AYT    => cmdbytes := CharacterSequences.default().NOP;
      when EC     => cmdbytes := CharacterSequences.default().SE;
      when EL     => cmdbytes := CharacterSequences.default().NOP;
      when GA     => cmdbytes := CharacterSequences.default().NOP;
      when SB     => cmdbytes := CharacterSequences.default().SE;
      when WILL   => cmdbytes := CharacterSequences.default().NOP;
      when WONT   => cmdbytes := CharacterSequences.default().SE;
      when DO     => cmdbytes := CharacterSequences.default().NOP;
      when DONT   => cmdbytes := CharacterSequences.default().NOP;
      when IAC    => cmdbytes := CharacterSequences.default().NOP;
      when others => cmdbytes := cmdbytes; // do nothing
    end case;
    keyboard.buffer := keyboard.buffer & cmdbytes;
    generate NetworkVirtualTerminal.data() to term;
  end if;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '0da5dc3c-c867-43d0-9617-02e802fa627f' DO NOT EDIT THIS LINE.
public service Telnet::attach ( termid : in termid,
                               host : in string,
                               port : in integer ) is
begin
  null; // TODO implement
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'c55d12b5-c261-45b8-ab42-158601c4fbef' DO NOT EDIT THIS LINE.
public service Telnet::listen ( termid : in termid,
                               port : in integer ) is
term: instance of NetworkVirtualTerminal;
conn: instance of RemoteConnection;
localaddr: Socket::sockaddr;
begin
  // select the terminal instance
  term := find_one NetworkVirtualTerminal( id = termid );
  if ( null /= term ) then
    // validate the arguments
    if ( port_is_valid( port ) ) then
      // select an existing connection
      if ( null = term->R3.communicates_through.RemoteConnection ) then
        conn := create RemoteConnection( nvt_id => term.id, Current_State => Idle );
        link conn R3.provides_communication_channel_for term;
        localaddr.address := "127.0.0.1";
        localaddr.port := port;
        conn.local_address := localaddr;
        generate RemoteConnection.listen() to conn;
      else
        Logger::error( "Telnet::listen: " & TERMBUSY'image & " Terminal is busy." );
        Print~>error( ( "Terminal is busy.", TERMBUSY ) );
      end if;
    else
      Logger::error( "Telnet::listen: " & PORTINVAL'image & " Invalid port value." );
      Print~>error( ( "Invalid port value.", PORTINVAL ) );
    end if;
  else
    Logger::error( "Telnet::listen: " & TERMINVAL'image & " Terminal does not exist." );
    Print~>error( ( "Terminal does not exist.", TERMINVAL ) );
  end if;
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

