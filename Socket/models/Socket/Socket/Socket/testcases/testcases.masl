//! ACTIVITY BEGIN. '8813849e-3684-4e42-a9b4-71c90157cae1' DO NOT EDIT THIS LINE.
private service Socket::testrecv () is
serversock: socketfd;
localaddr: sockaddr;
sock: socketfd;
peeraddr: sockaddr;
databuffer: data;
retval: integer;
begin
  
  serversock := -1;
  sock := -1;

  // create a server socket
  serversock := socket( SOCK_STREAM, IPPROTO_TCP );
  if ( serversock < 0 ) then
    console << "Socket creation error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  end if;

  // bind to localhost on port 8080
  localaddr.address := "127.0.0.1";
  localaddr.port := 8080;
  retval := bind( serversock, localaddr );
  if ( retval < 0 ) then
    console << "Bind error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  end if;
  
  // listen for one connection
  retval := listen( serversock, 1 );
  if ( retval < 0 ) then
    console << "Listen error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  end if;
  
  // accept a connection
  sock := accept( serversock, peeraddr );
  if ( sock < 0 ) then
    console << "Accept error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  end if;
  
  // set timeout to 5 seconds
  retval := setsockopt( sock, SO_RCVTIMEO, durationtotimeval( @PT5S@ ) );
  if ( retval < 0 ) then
    console << "Set socket option error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  end if;

  // receive data
  retval := recv( sock, databuffer, 256, 0 );
  if ( retval < 0 ) then
    console << "Receive error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  else
    // log the data
    console << "Message: " << datatostring( databuffer ) << endl;
    retval := close( integer(serversock) );
    retval := close( integer(sock) );
  end if;

exception when SocketException =>
  retval := close( integer(serversock) );
  retval := close( integer(sock) );

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '5220fc5f-a31d-43dd-b8d5-cb44c4c845b1' DO NOT EDIT THIS LINE.
private service Socket::testsend () is
sock: socketfd;
peeraddr: sockaddr;
msg: string;
retval: integer;
begin

  sock := -1;

  // create a client socket
  sock := socket( SOCK_STREAM, IPPROTO_TCP );
  if ( sock < 0 ) then
    console << "Socket creation error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  end if;
  
  // connect to server
  peeraddr.address := "127.0.0.1";
  peeraddr.port := 8080;
  retval := connect( sock, peeraddr );
  if ( retval < 0 ) then
    console << "Connect error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  end if;
  
  // send some data
  msg := "Hello, World!";
  retval := send( sock, stringtodata( msg ), msg'length(), 0 );
  if ( retval < 0 ) then
    console << "Send error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  end if;
  retval := close( integer(sock) );
  
exception when SocketException =>
  retval := close( integer(sock) );

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '714513b0-a7bb-4895-bccc-da5c03b81ddf' DO NOT EDIT THIS LINE.
private service Socket::testsend_udp () is
sock: socketfd;
peeraddr: sockaddr;
msg: string;
retval: integer;
begin

  sock := -1;

  // create a client socket
  sock := socket( SOCK_DGRAM, IPPROTO_UDP );
  if ( sock < 0 ) then
    console << "Socket creation error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  end if;
  
  // send some data
  peeraddr.address := "127.0.0.1";
  peeraddr.port := 8080;
  msg := "Hello, World! (UDP)";
  retval := sendto( sock, stringtodata( msg ), msg'length(), 0, peeraddr );
  if ( retval < 0 ) then
    console << "Send error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  end if;
  retval := close( integer(sock) );
  
exception when SocketException =>
  retval := close( integer(sock) );

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'ca89167a-0073-4ed7-872e-7b24d12f6a51' DO NOT EDIT THIS LINE.
private service Socket::testrecv_udp () is
serversock: socketfd;
localaddr: sockaddr;
peeraddr: sockaddr;
databuffer: data;
retval: integer;
begin

  serversock := -1;

  // create a server socket
  serversock := socket( SOCK_DGRAM, IPPROTO_UDP );
  if ( serversock < 0 ) then
    console << "Socket creation error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  end if;

  // bind to localhost on port 8080
  localaddr.address := "127.0.0.1";
  localaddr.port := 8080;
  retval := bind( serversock, localaddr );
  if ( retval < 0 ) then
    console << "Bind error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  end if;
  
  // receive some data
  retval := recvfrom( serversock, databuffer, 256, 0, peeraddr );
  if ( retval < 0 ) then
    console << "Receive error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  else
    // log the data
    console << "Message from " << peeraddr.address << ":" << peeraddr.port << ": " << datatostring( databuffer ) << endl;
    retval := close( integer(serversock) );
  end if;

exception when SocketException =>
  retval := close( integer(serversock) );

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. 'ef4bb16c-5619-491e-b00e-7bd728a19ab3' DO NOT EDIT THIS LINE.
private service Socket::testselect () is
serversock: socketfd;
localaddr: sockaddr;
sock: socketfd;
peeraddr: sockaddr;
databuffer: data;
retval: integer;
readfds: set of integer;
emptyset: set of integer;
begin

  serversock := -1;
  sock := -1;

  // create a server socket
  serversock := socket( SOCK_STREAM, IPPROTO_TCP );
  if ( serversock < 0 ) then
    console << "Socket creation error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  end if;

  // bind to localhost on port 8080
  localaddr.address := "127.0.0.1";
  localaddr.port := 8080;
  retval := bind( serversock, localaddr );
  if ( retval < 0 ) then
    console << "Bind error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  end if;
  
  // listen for one connection
  retval := listen( serversock, 1 );
  if ( retval < 0 ) then
    console << "Listen error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  end if;
  
  // select with a timeout
  retval := 0;
  while ( retval <= 0 ) loop
    readfds := integer(serversock);
    retval := select( readfds, emptyset, emptyset, durationtotimeval( @PT5S@ ) );
    if ( retval < 0) then
      console << "Select error " << geterror() << ": " << strerror() << endl;
      raise SocketException;
    elsif ( retval = 0 ) then
      console << "Timeout reached. looping..." << endl;
    end if;
  end loop;
  
  // accept a connection
  sock := accept( serversock, peeraddr );
  if ( sock < 0 ) then
    console << "Accept error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  end if;
  
  // set timeout to 5 seconds
  retval := setsockopt( sock, SO_RCVTIMEO, durationtotimeval( @PT5S@ ) );
  if ( retval < 0 ) then
    console << "Set socket option error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  end if;

  // receive data
  retval := recv( sock, databuffer, 256, 0 );
  if ( retval < 0 ) then
    console << "Receive error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  else
    // log the data
    console << "Message: " << datatostring( databuffer ) << endl;
    retval := close( integer(serversock) );
    retval := close( integer(sock) );
  end if;

exception when SocketException =>
  retval := close( integer(serversock) );
  retval := close( integer(sock) );

end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

