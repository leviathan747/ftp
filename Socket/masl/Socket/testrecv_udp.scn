private service Socket::testrecv_udp () is
serversock: socketfd;
localaddr: sockaddr;
peeraddr: sockaddr;
databuffer: data;
retval: integer;
begin

  serversock := -1;

  // create a server socket
  serversock := socket( SOCK_DGRAM, IPPROTO_UDP );
  if ( serversock < 0 ) then
    console << "Socket creation error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  end if;

  // bind to localhost on port 8080
  localaddr.address := "127.0.0.1";
  localaddr.port := 8080;
  retval := bind( serversock, localaddr );
  if ( retval < 0 ) then
    console << "Bind error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  end if;
  
  // receive some data
  retval := recvfrom( serversock, databuffer, 256, 0, peeraddr );
  if ( retval < 0 ) then
    console << "Receive error " << geterror() << ": " << strerror() << endl;
    raise SocketException;
  else
    // log the data
    console << "Message from " << peeraddr.address << ":" << peeraddr.port << ": " << datatostring( databuffer ) << endl;
    retval := close( integer(serversock) );
  end if;

exception when SocketException =>
  retval := close( integer(serversock) );

end service;
